// ===== CHAT MODELS =====

export type ConversationRole = 'Buyer' | 'Seller';
export type ConversationStatus = 'Active' | 'Closed' | 'Archived';
export type TemplateType = 'AutoReply' | 'Manual' | 'FAQ';
export type IntentType = 'Price' | 'Availability' | 'Details' | 'Negotiation' | 'Other';

export interface ConversationDto {
  id: string;
  adId: string;
  adTitle: string;
  buyerId: string;
  buyerName: string;
  sellerId: string;
  sellerName: string;
  status: ConversationStatus;
  lastMessage?: string;
  lastMessageAt?: Date;
  unreadCount: number;
  createdAt: Date;
  updatedAt: Date;
}

export interface DirectConversationDto {
  id: string;
  user1Id: string;
  user1Name: string;
  user2Id: string;
  user2Name: string;
  status: ConversationStatus;
  lastMessage?: DirectMessageDto;
  lastMessageAt?: Date;
  unreadCount: number;
  unreadMessageCount: number;
  createdAt: Date;
  updatedAt: Date;
}

export interface ChatMessageDto {
  id: string;
  conversationId?: string;
  directConversationId?: string;
  senderId: string;
  senderName: string;
  content: string;
  messageType: 'Text' | 'Image' | 'File' | 'System';
  isRead: boolean;
  createdAt: Date;
  editedAt?: Date;
  replyToId?: string;
}

export interface CreateConversationDto {
  adId: string;
  initialMessage: string;
}

export interface CreateDirectConversationDto {
  otherUserId: string;
  initialMessage: string;
}

export interface GetOrCreateDirectConversationDto {
  otherUserId: string;
}

export interface SendMessageDto {
  content: string;
  messageType?: 'Text' | 'Image' | 'File';
  replyToId?: string;
}

// Note: SendDirectMessageDto is defined later in the file

// Smart Replies Models
export interface ReplyRequestCommand {
  conversationId: string;
  messageContent: string;
  context?: string;
  userId: string;
}

export interface ReplyResultDto {
  id: string;
  content: string;
  confidence: number;
  intent: IntentType;
  templateId?: string;
  isAutoGenerated: boolean;
  suggestions: string[];
}

export interface StartConversationCommand {
  adId: string;
  initialMessage: string;
  userId: string;
}

export interface PostSellerReplyCommand {
  conversationId: string;
  content: string;
  userId: string;
}

export interface TemplateDto {
  id: string;
  name: string;
  content: string;
  type: TemplateType;
  intent: IntentType;
  isActive: boolean;
  adId?: string;
  userId: string;
  createdAt: Date;
  updatedAt: Date;
}

export interface CreateTemplateCommand {
  name: string;
  content: string;
  type: TemplateType;
  intent: IntentType;
  adId?: string;
  userId: string;
}

export interface SubmitFeedbackCommand {
  replyId: string;
  rating: number; // 1-5
  feedback?: string;
  userId: string;
}

export interface ReplyAnalyticsDto {
  totalReplies: number;
  autoReplies: number;
  manualReplies: number;
  averageRating: number;
  totalRating: number;
  byIntent: Record<IntentType, number>;
  byTemplate: Record<string, number>;
  timeRange: {
    from: Date;
    to: Date;
  };
}

export interface PagedResult<T> {
  data: T[];
  totalCount: number;
  pageNumber: number;
  pageSize: number;
  totalPages: number;
}

// Additional types
export type MessageType = 'Text' | 'Image' | 'File' | 'System';
export type MessageStatus = 'Sent' | 'Delivered' | 'Read' | 'Failed';
export type SenderType = 'User' | 'System' | 'Bot';

export interface DirectMessageDto {
  id: string;
  conversationId: string;
  senderId: string;
  senderName: string;
  senderType: SenderType;
  content: string;
  messageType: MessageType;
  status: MessageStatus;
  createdAt: Date;
  sentAt?: Date; // Add sentAt for backward compatibility
  readAt?: Date;
  isRead?: boolean; // Add isRead for backward compatibility
  replyToId?: string;
  metadata?: Record<string, unknown>;
}

export interface SendDirectMessageDto {
  conversationId: string;
  content: string;
  messageType?: 'Text' | 'Image' | 'File';
  replyToId?: string;
  metadata?: Record<string, unknown>;
}

// Legacy aliases for backward compatibility
export type Conversation = ConversationDto;
export type DirectConversation = DirectConversationDto;
export type Message = ChatMessageDto;
export type DirectMessage = DirectMessageDto;
export type ReplyTemplate = TemplateDto;